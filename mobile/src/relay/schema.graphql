schema {
  query: Query
  mutation: Mutation
}

scalar DateTime

type DeleteIdeaMutation {
  ok: Boolean
}

type ErrorType {
  field: String!
  messages: [String!]!
}

input IdeaMutationInput {
  id: String
  title: String!
  desc: String!
  notes: String
  createdById: String
  labId: String
  clientMutationId: String
}

type IdeaMutationPayload {
  id: String
  title: String
  desc: String
  notes: String
  createdBy: UserNode
  lab: LabNode
  errors: [ErrorType]
  createdById: ID
  labId: ID
  clientMutationId: String
}

type IdeaNode implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  desc: String!
  notes: String!
  createdBy: UserNode
  lab: LabNode!
}

type IdeaNodeConnection {
  pageInfo: PageInfo!
  edges: [IdeaNodeEdge]!
}

type IdeaNodeEdge {
  node: IdeaNode
  cursor: String!
}

type LabNode implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  createdBy: UserNode
  imageUrl: String!
  chatId: String!
  ideaSet(offset: Int, before: String, after: String, first: Int, last: Int, title: String, title_Icontains: String, desc: String, desc_Icontains: String, notes: String, notes_Icontains: String): IdeaNodeConnection!
}

type LabNodeConnection {
  pageInfo: PageInfo!
  edges: [LabNodeEdge]!
}

type LabNodeEdge {
  node: LabNode
  cursor: String!
}

type Mutation {
  idea(input: IdeaMutationInput!): IdeaMutationPayload
  deleteIdea(id: ID): DeleteIdeaMutation
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  lab(id: ID!): LabNode
  allLabs(offset: Int, before: String, after: String, first: Int, last: Int, name: String, name_Icontains: String, name_Istartswith: String): LabNodeConnection
  user(id: ID!): UserNode
  allUsers(offset: Int, before: String, after: String, first: Int, last: Int, username: String, username_Icontains: String, username_Istartswith: String, authKey: String): UserNodeConnection
  idea(id: ID!): IdeaNode
  allIdeas(offset: Int, before: String, after: String, first: Int, last: Int, title: String, title_Icontains: String, desc: String, desc_Icontains: String, notes: String, notes_Icontains: String): IdeaNodeConnection
}

type UserNode implements Node {
  password: String!
  lastLogin: DateTime
  isSuperuser: Boolean!
  isStaff: Boolean!
  isActive: Boolean!
  dateJoined: DateTime!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
  firstName: String!
  lastName: String!
  authKey: String!
  imageUrl: String!
  email: String!
  labSet(offset: Int, before: String, after: String, first: Int, last: Int, name: String, name_Icontains: String, name_Istartswith: String): LabNodeConnection!
  ideaSet(offset: Int, before: String, after: String, first: Int, last: Int, title: String, title_Icontains: String, desc: String, desc_Icontains: String, notes: String, notes_Icontains: String): IdeaNodeConnection!
}

type UserNodeConnection {
  pageInfo: PageInfo!
  edges: [UserNodeEdge]!
}

type UserNodeEdge {
  node: UserNode
  cursor: String!
}
